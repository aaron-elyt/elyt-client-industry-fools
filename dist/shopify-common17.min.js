const STOREFRONT_ACCESS_TOKEN="cb5f20fd2b37738c0d35f1e08278c7fb",SHOPIFY_DOMAIN="industry-fools.myshopify.com",SHOPIFY_API_VERSION="2025-01",$=t=>document.querySelector(t),$$=t=>document.querySelectorAll(t),safeDom=(t,e)=>{const n=$(t);return n&&e(n),n},getAllElements=t=>{if(t.startsWith("#")){const e=t.substring(1);return Array.from(document.querySelectorAll(`[id="${e}"]`))}return Array.from(document.querySelectorAll(t))};function isAddToCartButton(t){if(!t)return!1;if("add-to-cart"===t.id)return!0;if(t.classList&&(t.classList.contains("add-to-cart")||t.classList.contains("add_to_cart")))return!0;if(t.getAttribute&&"add-to-cart"===t.getAttribute("data-action"))return!0;const e=(t.textContent||"").toLowerCase();return e.includes("add to cart")||e.includes("add-to-cart")}!function(){const t=document.createElement("style");t.textContent="\n    .invisible-before-load { visibility: hidden; }\n  ",document.head.appendChild(t)}();class ShopifyClient{constructor(t,e,n){this.domain=t,this.storefrontAccessToken=e,this.apiVersion=n,this.locale="en-US"}async fetchStorefront(t,e={}){try{const n=await fetch(`https://${this.domain}/api/${this.apiVersion}/graphql.json`,{method:"POST",headers:{"Content-Type":"application/json","X-Shopify-Storefront-Access-Token":this.storefrontAccessToken},body:JSON.stringify({query:t,variables:e})});if(!n.ok)throw new Error(`API error: ${n.status}`);const{data:r,errors:a}=await n.json();if(a)throw new Error(a[0].message);return r}catch(t){return null}}async getProductById(t){const e=await this.fetchStorefront("\n      query GetProductById($id: ID!) {\n        product(id: $id) {\n          id\n          title\n          description\n          descriptionHtml\n          handle\n          images(first: 4) {\n            edges {\n              node {\n                url\n                altText\n              }\n            }\n          }\n          variants(first: 250) {\n            edges {\n              node {\n                id\n                title\n                availableForSale\n                priceV2 {\n                  amount\n                  currencyCode\n                }\n                quantityAvailable\n              }\n            }\n          }\n        }\n      }\n    ",{id:`gid://shopify/Product/${t}`});return e?.product}async createCart(){const t=await this.fetchStorefront("\n      mutation CartCreate {\n        cartCreate {\n          cart {\n            id\n            checkoutUrl\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    ");return t?.cartCreate?.cart}async getCart(t){const e=await this.fetchStorefront("\n      query GetCart($cartId: ID!) {\n        cart(id: $cartId) {\n          id\n          lines(first: 100) {\n            edges {\n              node {\n                id\n                quantity\n                merchandise {\n                  ... on ProductVariant {\n                    id\n                    title\n                    product {\n                      title\n                    }\n                    image {\n                      url\n                      altText\n                    }\n                    priceV2 {\n                      amount\n                      currencyCode\n                    }\n                  }\n                }\n              }\n            }\n          }\n          cost {\n            subtotalAmount {\n              amount\n              currencyCode\n            }\n          }\n          checkoutUrl\n        }\n      }\n    ",{cartId:t});return e?.cart}async addToCart(t,e,n){const r={cartId:t,lines:[{merchandiseId:e,quantity:parseInt(n,10)}]},a=await this.fetchStorefront("\n      mutation CartLinesAdd($cartId: ID!, $lines: [CartLineInput!]!) {\n        cartLinesAdd(cartId: $cartId, lines: $lines) {\n          cart {\n            id\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    ",r);return a?.cartLinesAdd?.cart}async updateCartLine(t,e,n){const r={cartId:t,lines:[{id:e,quantity:parseInt(n,10)}]},a=await this.fetchStorefront("\n      mutation CartLinesUpdate($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n        cartLinesUpdate(cartId: $cartId, lines: $lines) {\n          cart {\n            id\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    ",r);return a?.cartLinesUpdate?.cart}async removeCartLine(t,e){const n={cartId:t,lineIds:[e]},r=await this.fetchStorefront("\n      mutation CartLinesRemove($cartId: ID!, $lineIds: [ID!]!) {\n        cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n          cart {\n            id\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    ",n);return r?.cartLinesRemove?.cart}}class ShopifyCart{constructor(t){this.client=t,this.cartId=localStorage.getItem("sf_cart_id"),this.isOpen=!1,this.boundEvents=new WeakMap}async getOrCreateCart(){if(!this.cartId){const t=await this.client.createCart();t&&(this.cartId=t.id,localStorage.setItem("sf_cart_id",t.id))}return this.cartId}async fetchCart(){return this.cartId?await this.client.getCart(this.cartId):null}async addItem(t,e=1){const n=await this.getOrCreateCart();return n?await this.client.addToCart(n,t,e):null}async updateItem(t,e){return this.cartId?await this.client.updateCartLine(this.cartId,t,e):null}async removeItem(t){return this.cartId?await this.client.removeCartLine(this.cartId,t):null}async renderCart(){if(!$("#cart-drawer"))return;const t=await this.fetchCart();if(!t)return;this.renderCartItems(t),getAllElements("#cart-subtotal").forEach(e=>{const{amount:n,currencyCode:r}=t.cost.subtotalAmount;e.textContent=new Intl.NumberFormat("en-US",{style:"currency",currency:r}).format(n)}),getAllElements("#cart-checkout").forEach(e=>{e.href=t.checkoutUrl});const e=t.lines.edges.reduce((t,{node:e})=>t+e.quantity,0),n=`CART (${e})`;this.getAllCartToggleButtons().forEach(t=>{t.dataset.originalText||(t.dataset.originalText=t.textContent),t.dataset.cartTextTemplate?t.textContent=t.dataset.cartTextTemplate.replace("{count}",e):t.textContent=n})}getAllCartToggleButtons(){const t=[];t.push(...$$(".cart-toggle")),t.push(...getAllElements("#cart-toggle")),t.push(...$$("[data-cart-toggle]"));const e=Array.from($$("button, a")).filter(t=>!t.classList.contains("cart-toggle")&&"cart-toggle"!==t.id&&!t.hasAttribute("data-cart-toggle")&&(!isAddToCartButton(t)&&(t.textContent||"").toLowerCase().includes("cart")));t.push(...e);return[...new Set(t)].filter(t=>!isAddToCartButton(t))}renderCartItems(t){const e=$("#cart-body");e&&(e.innerHTML="",0!==t.lines.edges.length?(t.lines.edges.forEach(({node:t})=>{const{id:n,quantity:r,merchandise:a}=t,{product:s,image:i,priceV2:c}=a,o=document.createElement("div");o.className="cart-line flex items-center gap-4 py-3 border-b";const d=new Intl.NumberFormat("en-US",{style:"currency",currency:c.currencyCode}).format(c.amount*r);let l="";i?.url&&(l=`<img src="${i.url}" alt="${i.altText||""}" class="w-full">`),o.innerHTML=`\n        <div class="w-16">${l}</div>\n        <div class="flex-1">\n          <div class="font-medium">${s.title}</div>\n          <div class="cart-title text-sm text-gray-600">${a.title}</div>\n          <div class="flex items-center gap-2 mt-1">\n            <button class="cart-qty-btn minus" data-line-id="${n}">-</button>\n            <span>${r}</span>\n            <button class="cart-qty-btn plus" data-line-id="${n}" data-qty="${r}">+</button>\n            <button class="ml-2 text-sm text-red-500 remove" data-line-id="${n}">Remove</button>\n          </div>\n        </div>\n        <div class="cart-price font-medium">${d}</div>\n      `,e.appendChild(o)}),this.addCartItemEvents()):e.innerHTML='<div class="p-4 text-center">Your cart is empty</div>')}addCartItemEvents(){$$(".cart-qty-btn.minus").forEach(t=>{t.addEventListener("click",async()=>{const e=t.dataset.lineId,n=parseInt(t.nextElementSibling.textContent,10);n>1?await this.updateItem(e,n-1):await this.removeItem(e),await this.renderCart()})}),$$(".cart-qty-btn.plus").forEach(t=>{t.addEventListener("click",async()=>{const e=t.dataset.lineId,n=parseInt(t.dataset.qty,10);await this.updateItem(e,n+1),await this.renderCart()})}),$$(".remove").forEach(t=>{t.addEventListener("click",async()=>{const e=t.dataset.lineId;await this.removeItem(e),await this.renderCart()})})}toggleCart(){this.isOpen=!this.isOpen,getAllElements("#cart-overlay").forEach(t=>t.classList.toggle("hidden",!this.isOpen)),getAllElements("#cart-drawer").forEach(t=>t.classList.toggle("translate-x-full",!this.isOpen)),this.isOpen&&this.renderCart()}addSafeEventListener(t,e,n){this.boundEvents.has(t)||this.boundEvents.set(t,new Map);const r=this.boundEvents.get(t);if(!r.has(e)){const a=n.bind(this);r.set(e,a),t.addEventListener(e,a)}}setupCartUI(){this.getAllCartToggleButtons().forEach(t=>{this.addSafeEventListener(t,"click",function(t){t.preventDefault(),this.toggleCart()})}),getAllElements("#cart-close").forEach(t=>{this.addSafeEventListener(t,"click",function(){this.toggleCart()})}),getAllElements("#cart-overlay").forEach(t=>{this.addSafeEventListener(t,"click",function(e){e.target===t&&this.toggleCart()})}),this.renderCart()}}document.addEventListener("DOMContentLoaded",()=>{window.shopifyClient||(window.shopifyClient=new ShopifyClient(SHOPIFY_DOMAIN,STOREFRONT_ACCESS_TOKEN,"2025-01")),$("#cart-drawer")&&(window.shopifyCart=new ShopifyCart(window.shopifyClient),window.shopifyCart.setupCartUI())});