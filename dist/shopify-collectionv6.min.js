class CollectionPage{constructor(e){this.client=e}async fetchCollectionProducts(e){const t=`https://${this.client.domain}/api/${this.client.apiVersion}/graphql.json`,n={handle:e};try{const e=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json","X-Shopify-Storefront-Access-Token":this.client.storefrontAccessToken},body:JSON.stringify({query:"\n      query GetCollectionProducts($handle: String!) {\n        collectionByHandle(handle: $handle) {\n          products(first: 20) {\n            edges {\n              node {\n                id\n                handle\n                title\n                images(first: 2) {\n                  edges {\n                    node {\n                      url\n                    }\n                  }\n                }\n                variants(first: 1) {\n                  edges {\n                    node {\n                      title\n                      priceV2 {\n                        amount\n                        currencyCode\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    ",variables:n})});if(!e.ok)throw new Error(`Shopify API error: ${e.status}`);const{data:o,errors:i}=await e.json();if(i)throw new Error(i[0].message);return o.collectionByHandle?.products?.edges.map(e=>e.node)||[]}catch(e){return[]}}formatPrice(e,t){return new Intl.NumberFormat("en-US",{style:"currency",currency:t}).format(e)}injectProductsToGrid(e){const t=document.getElementById("product-grid")||document.querySelector(".product-grid")||document.querySelector(".collection-grid")||document.querySelector(".w-dyn-items");t&&(t.innerHTML="",e.forEach(e=>{const n=e.images.edges[0]?.node.url||"",o=e.images.edges[1]?.node.url||n,i=e.variants.edges[0]?.node,r=i?this.formatPrice(i.priceV2.amount,i.priceV2.currencyCode):"",c=`\n        <div role="listitem" class="product7_item w-dyn-item">\n          <a href="/products/${e.handle}" class="product7_item-link w-inline-block">\n            <div class="margin-bottom margin-xsmall">\n              <div class="product7_image-wrapper">\n                <img src="${n}" class="product7_image" alt="${e.title}" loading="lazy" />\n                <img src="${o}" class="product7_image is-hover" alt="${e.title}" loading="lazy" />\n              </div>\n            </div>\n            <div class="margin-bottom margin-xxsmall">\n              <div class="text-size-medium text-weight-semibold">${e.title}</div>\n            </div>\n            <div class="text-size-large text-weight-semibold">${r}</div>\n          </a>\n        </div>\n      `;t.insertAdjacentHTML("beforeend",c)}))}async loadCollection(e){const t=await this.fetchCollectionProducts(e);this.injectProductsToGrid(t)}init(){const e=document.getElementById("product-grid")||document.querySelector(".product-grid")||document.querySelector(".collection-grid")||document.querySelector(".w-dyn-items");if(!e)return;let t=e.getAttribute("data-collection")||e.getAttribute("data-collection-handle")||document.body.getAttribute("data-collection");if(!t){const e=window.location.pathname.split("/"),n=e.indexOf("collections");-1!==n&&e.length>n+1&&(t=e[n+1])}t&&this.loadCollection(t)}}function waitForShopifyClient(e,t=20){let n=0;const o=()=>{n++,window.shopifyClient?e(window.shopifyClient):n<t&&setTimeout(o,100)};o()}document.addEventListener("DOMContentLoaded",()=>{(document.getElementById("product-grid")||document.querySelector(".product-grid")||document.querySelector(".collection-grid")||document.querySelector(".w-dyn-items")||window.location.pathname.includes("/collections/"))&&waitForShopifyClient(e=>{new CollectionPage(e).init()})});